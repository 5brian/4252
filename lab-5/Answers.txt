Question 1
var = 1
var = 0
var = 1, varB = 0
var = -2, varB = 0

When I called ptr->print() on a B object, it used A's print method.
To fix this, I made print() virtual in class A.
Now B's print method is called correctly when using ptr to a B object.

Question 2
var = -2
var = -2

When I use a = b, only the A part of b gets copied to a.
When I call a.print() or ptr->print() where ptr points to a, A's print method is called both times because a is now just an A object with B's data.
This differs from Question 1 where ptr pointed to an actual B object.

Question 3
var = -2

It explicitly uses A's print method instead of B's.

Question 4
var = -2

Yes, a B object can be passed to this function, but it will be sliced to just its A part.

Question 5
[tan.1220@coe-dnc268474s ~]$ g++ classes.cpp
classes.cpp: In function ‘int main()’:
classes.cpp:38:12: error: ‘A’ is an inaccessible base of ‘B’
     ptr = &b;
            ^
classes.cpp:44:9: error: ‘A’ is an inaccessible base of ‘B’
     a = b;
         ^
classes.cpp:49:7: error: ‘class A A::A’ is inaccessible within this context
     b.A::print();
       ^
classes.cpp:4:9: note: declared here
 class A {
         ^
classes.cpp:49:10: error: ‘A’ is an inaccessible base of ‘B’
     b.A::print();
          ^~~~~
classes.cpp:51:32: error: ‘A’ is an inaccessible base of ‘B’
     A returned_obj = function(b);
                                ^
classes.cpp:24:3: note:   initializing argument 1 of ‘A function(A)’
 A function(A obj) {
   ^~~~~~~~

The inheritance would be private.
This makes A's members private in B, so B objects can't be treated as A objects anymore.
